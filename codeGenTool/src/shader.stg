vert(shader, generatedForFirstTime) ::= <<
#version 430 core
<if(shader.vertexAttributes)>

<shader.vertexAttributes : { attribute | layout(location = <attribute.layout>) in <inOrOutVariable(attribute.field.dataType, vertexAttributeName(attribute.nameFirstLetterUppercase, attribute.isPerInstance))>; }; separator="\n"><\\>
<endif><\\>
<if(shader.vertUniforms.fields)>

<shader.vertUniforms.fields : { uniform | uniform <uniform(uniform.dataType, uniform.name)>; }; separator="\n">
<endif><\\>
<if(shader.vertOut)>

<shader.vertOut : { variable | out <inOrOutVariable(variable.dataType, variable.name)>; }; separator="\n">
<endif><\\>
<if(shader.instanceFragFields)>

<shader.instanceFragFields : { variable | out <inOrOutVariable(variable.dataType, variable.name)>; }; separator="\n">

void passToFragment() {
    <shader.instanceFragFields : { variable | <variable.name> = instance<variable.nameFirstLetterToUppercase>; }; separator="\n">
}<\\>
<endif><\\>



/*generated end*/<\\>
<if(generatedForFirstTime)>

void main() {

}
<endif>
>>

vertexAttributeName(name, isPerInstance) ::= <%
<if(isPerInstance)>instance<else>vertex<endif><name>
%>

frag(shader, generatedForFirstTime) ::= <<
#version 430 core
<if(shader.fragUniforms.fields)>

<shader.fragUniforms.fields : { uniform | uniform <uniform(uniform.dataType, uniform.name)>; }; separator="\n">
<endif><\\>
<if(shader.vertOut)>

<shader.vertOut : { variable | in <inOrOutVariable(variable.dataType, variable.name)>; }; separator="\n">
<endif><\\>
<if(shader.instanceFragFields)>

<shader.instanceFragFields : { variable | in <inOrOutVariable(variable.dataType, variable.name)>; }; separator="\n">
<endif><\\>

out vec4 fragColor;

/*generated end*/<\\>
<if(generatedForFirstTime)>

void main() {

}
<endif>
>>

inOrOutVariable(dataType, name) ::= <%
<if(dataType.isI32)>
flat int <name>
<elseif(dataType.isBool)>
flat bool <name>
<else>
<dataType.nameFirstLetterLowercase> <name>
<endif>
%>

uniform(dataType, name) ::= <%
<if(dataType.isI32)>
int <name>
<elseif(dataType.isBool)>
bool <name>
<else>
<dataType.nameFirstLetterLowercase> <name>
<endif>
%>

uniformBlock(struct) ::= <<
layout (std140) uniform <struct.name> {
    <struct.fields : { field | <uniform(field.dataType, field.name)>; }; separator="\n">
};
>>