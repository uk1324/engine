import "shared.stg"

dataFile(hppPath, dataFile) ::= <<
#include "<hppPath>"
<includePaths(dataFile.cppIncludePaths)>

<dataFile.declarations : { declaration | <declaration(declaration)> } >
>>

declaration(declaration) ::= <%
<if(declaration.isStruct)>
    <struct(declaration)>
<elseif(declaration.isEnum)>
    <enum(declaration)>
<elseif(declaration.isCpp)>

<elseif(declaration.isShader)>
    <shader(declaration)>
<else>
    declaration error
<endif>
%>

struct(struct) ::= <<
<if(struct.isBullet)>
UntypedBulletIndex <struct.name>Index::untypedIndex() const {
    return UntypedBulletIndex{ ownerPlayerIndex, spawnFrame, spawnIndexInFrame };
}

template\<>
<struct.name>Index fromJson\<<struct.name>Index>(const Json::Value& json) {
    return <struct.name>Index{
        .ownerPlayerIndex = static_cast\<PlayerIndex>(json.at("ownerPlayerIndex").intNumber()),
        .spawnFrame = static_cast\<FrameTime>(json.at("spawnFrame").intNumber()),
        .spawnIndexInFrame = static_cast\<u16>(json.at("spawnIndexInFrame").intNumber()),
    };
}

Json::Value toJson(const <struct.name>Index& value) {
    auto json = Json::Value::emptyObject();
    json["ownerPlayerIndex"] = Json::Value(static_cast\<Json::Value::IntType>(value.ownerPlayerIndex.value));
    json["spawnFrame"] = Json::Value(value.spawnFrame);
    json["spawnIndexInFrame"] = Json::Value(value.spawnIndexInFrame);
    return json;
}
<endif>

<if(struct.isGui)>
bool gui(<struct.name>& value) {
    using namespace Gui;
    ImGui::PushID(&value);
    bool changed = false;

    <struct.fields : { field | <if(!field.isNoGui)><gui(field.dataType, fieldAccess("value", field.name), field.displayName)><endif>} >
    ImGui::PopID();

    return changed;
}
<endif>

<if(struct.isJson)>
Json::Value toJson(const <struct.name>& value) {
    auto json = Json::Value::emptyObject();

    <struct.fields : { field | <if(!field.isNoJsonSerialize)><toJson(field.dataType, field.name)><endif>} >
    return json;
}

template\<\>
<struct.name> fromJson\<<struct.name>\>(const Json::Value& json) {
    return <struct.name> {
        <struct.fields : { field
            |
<if(!field.isNoJsonSerialize)>
.<field.name> = <if(field.hasDefaultValue)>!json.contains("<field.name>") ? <field.defaultValue> : <endif><fromJson(field.dataType, jsonAccess("json", field.name))>,
<endif>
}
        >
    };
}
<endif>

<if(struct.isUniform)>
void shaderSetUniforms(ShaderProgram& shader, const <struct.name>& value) {
    <struct.fields : { field | shader.set("<field.name>", value.<field.name>); } >
}
<endif>
>>

gui(dataType, name, displayedName) ::= <<
<\\>
<if(dataType.isRangedFloat)><\\>
changed |= sliderFloat("<displayedName>", <name>, <dataType.min>, <dataType.max>);
<elseif(dataType.isFloat)><\\>
changed |= inputFloat("<displayedName>", <name>);
<elseif(dataType.isBool)><\\>
changed |= checkbox("<displayedName>", <name>);
<elseif(dataType.isColor || dataType.isColor3)><\\>
changed |= inputColor("<displayedName>", <name>);
<elseif(dataType.isVec2)><\\>
changed |= inputVec2("<displayedName>", <name>);
<elseif(dataType.isVec3)><\\>
changed |= inputVec3("<displayedName>", <name>);
<elseif(dataType.isIdentifier)><\\>
if (node("<displayedName>")) {
    changed |= gui(<name>);
    nodeEnd();
}
<elseif(dataType.isRangedSignedInt)><\\>
changed |= sliderI32("<displayedName>", <name>, <dataType.min>, <dataType.max>);
<elseif(dataType.isI32)><\\>
changed |= inputI32("<displayedName>", <name>);
<else><\\>
/* <name> */
<endif>
>>

toJson(dataType, name) ::= <<
<if(dataType.isFloat || dataType.isBool || dataType.isI32)><\\>
json["<name>"] = Json::Value(value.<name>);
<else><\\>
json["<name>"] = toJson(value.<name>);
<endif>
>>

fromJson(dataType, name) ::= <<
<if(dataType.isFloat)><\\>
<name>.number()<\\>
<elseif(dataType.isI32)><\\>
<name>.intNumber()<\\>
<elseif(dataType.isBool)><\\>
<name>.boolean()<\\>
<elseif(dataType.isMap)><\\>
[&] {
    std::unordered_map\<<dataType.keyDataType.name>, <dataType.valueDataType.name>\> result;
    const auto& array = <name>.array();
    for (const auto& object : array) {
        result[std::move(<fromJson(dataType.keyDataType, "object.at(\"key\")")>)] = std::move(<fromJson(dataType.valueDataType, "object.at(\"value\")")>);
    }
    return result;
}()
<elseif(dataType.isVector)><\\>
[&] {
    std::vector\<<dataType.itemDataType.name>\> result;
    const auto& array = <name>.array();
    for (const auto& item : array) {
        result.push_back(fromJson\<<dataType.itemDataType.name>\>(item));
    }
    return result;
}()
<else><\\>
fromJson\<<dataType.name>\>(<name>)<\\>
<endif>
>>

enum(enum) ::= <<
<if(enum.isToStr)>
const char* toStr(<enum.name> value) {
    switch (value) {
        <enum.definitions : { definition | case <enum.name>::<definition.name>: return "<definition.name>"; }; separator="\n">
    }
}
<endif>
<if(enum.isImGuiCombo)>
void combo(<enum.name>* value) {
    switch (value) {
        <enum.definitions : { definition | case <enum.name>::<definition.name>: return "<definition.name>"; }; separator="\n">
    }
}
<endif>
<if(enum.isJson)>
Json::Value toJson(const <enum.name>& value) {
    return Json::Value(static_cast\<Json::Value::IntType\>(value));
}
<enum.name> fromJson\<<enum.name>\>(const Json::Value& json) {
    return static_cast\<<enum.name>\>(json.intNumber());
}
<endif>
>>

shader(shader) ::= <<
<struct(shader.instance)>
<struct(shader.fragUniforms)>
<struct(shader.vertUniforms)>

void <shader.name>Shader::addAttributesToVao(Vao& vao, Vbo& verticesVbo, Vbo& instancesVbo) {
    using Vec1 = float;
    vao.bind();
    verticesVbo.bind();
    <shader.vertexAttributes : { attribute | <if(!attribute.isPerInstance)><setVaoAttribute(attribute.field.name, attribute.field.dataType, attribute.layout, shader.vertexStructName, "0")><endif> }; separator="\n">
    instancesVbo.bind();
    <shader.vertexAttributes : { attribute | <if(attribute.isPerInstance)><setVaoAttribute(attribute.field.name, attribute.field.dataType, attribute.layout, shader.instance.name, "1")><endif> }; separator="\n">
}
>>

setVaoAttribute(name, dataType, layout, instanceName, divisor) ::= <<
<! For nesting types could generate a function that takes the layout for each struct !>
<! It would probably take more time to write a system to automatically generate these than to just write the specific needed cases !>
<if(dataType.isFloat)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "1", instanceName, name, divisor)>
<elseif(dataType.isVec2)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "2", instanceName, name, divisor)>
<elseif(dataType.isVec3)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "3", instanceName, name, divisor)>
<elseif(dataType.isVec4)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "4", instanceName, name, divisor)>
<elseif(dataType.isMat3x2)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "2", instanceName, name, divisor)>
<setSingleVaoAttribute(layout, "1", "Float", "2", instanceName, name, divisor)>
<setSingleVaoAttribute(layout, "2", "Float", "2", instanceName, name, divisor)>
<elseif(dataType.isMat4)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "4", instanceName, name, divisor)>
<setSingleVaoAttribute(layout, "1", "Float", "4", instanceName, name, divisor)>
<setSingleVaoAttribute(layout, "2", "Float", "4", instanceName, name, divisor)>
<setSingleVaoAttribute(layout, "3", "Float", "4", instanceName, name, divisor)>
<else><\\>
error
<endif>
>>

setSingleVaoAttribute(layout, layoutOffset, shaderDataType, shaderDataTypeCount, instanceName, name, divisor) ::= <<
boundVaoSetAttribute(<layout> + <layoutOffset>, ShaderDataType::<shaderDataType>, <shaderDataTypeCount>, offsetof(<instanceName>, <name>) + sizeof(Vec<shaderDataTypeCount>) * <layoutOffset>, sizeof(<instanceName>));
glVertexAttribDivisor(<layout> + <layoutOffset>, <divisor>);
>>